//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TiaanOdendaal.ServiceReference1 {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IService1")]
    public interface IService1 {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetData", ReplyAction="http://tempuri.org/IService1/GetDataResponse")]
        string GetData(int value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetData", ReplyAction="http://tempuri.org/IService1/GetDataResponse")]
        System.Threading.Tasks.Task<string> GetDataAsync(int value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetClients", ReplyAction="http://tempuri.org/IService1/GetClientsResponse")]
        BL.Client[] GetClients(int clientID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetClients", ReplyAction="http://tempuri.org/IService1/GetClientsResponse")]
        System.Threading.Tasks.Task<BL.Client[]> GetClientsAsync(int clientID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAddresses", ReplyAction="http://tempuri.org/IService1/GetAddressesResponse")]
        BL.Address[] GetAddresses(int ClientID, int AddressID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAddresses", ReplyAction="http://tempuri.org/IService1/GetAddressesResponse")]
        System.Threading.Tasks.Task<BL.Address[]> GetAddressesAsync(int ClientID, int AddressID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SaveClient", ReplyAction="http://tempuri.org/IService1/SaveClientResponse")]
        int SaveClient(int ClientID, string cname, string csurname, int cgender, string cemail, string cbirthdate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SaveClient", ReplyAction="http://tempuri.org/IService1/SaveClientResponse")]
        System.Threading.Tasks.Task<int> SaveClientAsync(int ClientID, string cname, string csurname, int cgender, string cemail, string cbirthdate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SaveAddress", ReplyAction="http://tempuri.org/IService1/SaveAddressResponse")]
        bool SaveAddress(int addressid, string address1, string address2, string suburb, string city, int addrtype, int clientID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SaveAddress", ReplyAction="http://tempuri.org/IService1/SaveAddressResponse")]
        System.Threading.Tasks.Task<bool> SaveAddressAsync(int addressid, string address1, string address2, string suburb, string city, int addrtype, int clientID);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IService1Channel : TiaanOdendaal.ServiceReference1.IService1, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Service1Client : System.ServiceModel.ClientBase<TiaanOdendaal.ServiceReference1.IService1>, TiaanOdendaal.ServiceReference1.IService1 {
        
        public Service1Client() {
        }
        
        public Service1Client(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public Service1Client(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string GetData(int value) {
            return base.Channel.GetData(value);
        }
        
        public System.Threading.Tasks.Task<string> GetDataAsync(int value) {
            return base.Channel.GetDataAsync(value);
        }
        
        public BL.Client[] GetClients(int clientID) {
            return base.Channel.GetClients(clientID);
        }
        
        public System.Threading.Tasks.Task<BL.Client[]> GetClientsAsync(int clientID) {
            return base.Channel.GetClientsAsync(clientID);
        }
        
        public BL.Address[] GetAddresses(int ClientID, int AddressID) {
            return base.Channel.GetAddresses(ClientID, AddressID);
        }
        
        public System.Threading.Tasks.Task<BL.Address[]> GetAddressesAsync(int ClientID, int AddressID) {
            return base.Channel.GetAddressesAsync(ClientID, AddressID);
        }
        
        public int SaveClient(int ClientID, string cname, string csurname, int cgender, string cemail, string cbirthdate) {
            return base.Channel.SaveClient(ClientID, cname, csurname, cgender, cemail, cbirthdate);
        }
        
        public System.Threading.Tasks.Task<int> SaveClientAsync(int ClientID, string cname, string csurname, int cgender, string cemail, string cbirthdate) {
            return base.Channel.SaveClientAsync(ClientID, cname, csurname, cgender, cemail, cbirthdate);
        }
        
        public bool SaveAddress(int addressid, string address1, string address2, string suburb, string city, int addrtype, int clientID) {
            return base.Channel.SaveAddress(addressid, address1, address2, suburb, city, addrtype, clientID);
        }
        
        public System.Threading.Tasks.Task<bool> SaveAddressAsync(int addressid, string address1, string address2, string suburb, string city, int addrtype, int clientID) {
            return base.Channel.SaveAddressAsync(addressid, address1, address2, suburb, city, addrtype, clientID);
        }
    }
}
